name: FukayaLab_Server

# --------------------------------------------------------------------------
#  🧩 外部のDocker Composeファイルを取り込む (各Webサービスなど)
# --------------------------------------------------------------------------
# 例: GitLabや自作のWebアプリケーションなどを個別のComposeファイルで管理している場合
# パスはこのdocker-compose.ymlファイルからの相対パスで指定します。
# include:
#   - path: ../gitlab-stack/docker-compose.yml
#     # project_directory: ../gitlab-stack # 必要に応じて
#   - path: ../my-custom-webapp/docker-compose.yml
#     # project_directory: ../my-custom-webapp # 必要に応じて

services:
  # --------------------------------------------------------------------------
  #  🌐 リバースプロキシ & HTTPS終端 (Caddy)
  # --------------------------------------------------------------------------
  caddy:
    image: caddy:2-alpine # Alpineベースの軽量イメージ (バージョンは適宜最新を確認)
    container_name: ReverseProxy_caddy
    hostname: caddy # コンテナホスト名
    restart: unless-stopped
    ports:
      - "80:80"   # HTTP (HTTPSへのリダイレクト用)
      - "443:443"  # HTTPS
      - "443:443/udp" # HTTP/3 (QUIC) 用 (オプション)
    volumes:
      - ./caddy_config/Caddyfile:/etc/caddy/Caddyfile # TODO: Caddyfileのパスを実際に合わせる
      - caddy_data:/data # 証明書などの永続化
      - caddy_config_current:/config # Caddyの現在の設定など
    environment:
      - ACME_AGREE=true # Let's Encryptの利用規約に同意 (本番ドメインの場合)
      # - TZ=Asia/Tokyo # タイムゾーン設定 (任意)
    networks:
      - frontend_network
      - shared_backend_network
    depends_on: # Caddyが起動する前にプロキシ先のサービスがある程度起動していることを期待 (必須ではない)
      - main_api
      - pgadmin
      - duplicati
      - portainer
      # - gitlab # includeする場合のサービス名 (例)
      # - my_custom_webapp_service # includeする場合のサービス名 (例)

  # --------------------------------------------------------------------------
  #  🚀 メインAPIサーバー
  # --------------------------------------------------------------------------
  main_api:
    build:
      context: ./main_api_src # TODO: mainAPIのDockerfileがあるディレクトリへのパス
      dockerfile: Dockerfile
    container_name: main_api_server
    hostname: main_api
    restart: unless-stopped
    environment:
      # .envファイルの使用を推奨 (例: POSTGRES_USER=${POSTGRES_USER})
      - NODE_ENV=production # 例: Node.jsの場合
      - DATABASE_HOST=postgres_db
      - DATABASE_PORT=5432
      - DATABASE_USER=your_db_user # TODO: .envファイルで管理
      - DATABASE_PASSWORD=your_db_password # TODO: .envファイルで管理
      - DATABASE_NAME=your_app_database # TODO: .envファイルで管理
      # - JWT_SECRET=your_jwt_secret # TODO: .envファイルで管理
      # 他、APIに必要な環境変数
    volumes:
      - ./main_api_src:/usr/src/app # 開発時のホットリロード用 (本番では削除または調整)
      - /usr/src/app/node_modules # ↑のボリュームマウント時にnode_modulesが上書きされるのを防ぐ (Node.jsの場合)
    depends_on:
      postgres_db:
        condition: service_healthy # PostgreSQLがヘルスチェックをパスしてから起動 (PostgreSQL側のヘルスチェック設定が必要)
    networks:
      - shared_backend_network
    # expose: # コンテナ間通信のみでホストに公開しないポート
    #   - "3000" # mainAPIがリッスンするポート (例)

  # --------------------------------------------------------------------------
  #  🐘 PostgreSQL データベース (アカウントDB, ログDBなど)
  # --------------------------------------------------------------------------
  postgres_db:
    image: postgres:16-alpine # TODO: バージョンは適宜選択
    container_name: postgres_database
    hostname: postgres_db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=your_db_user # TODO: .envファイルで管理
      - POSTGRES_PASSWORD=your_db_password # TODO: .envファイルで管理
      - POSTGRES_DB=your_app_database # TODO: .envファイルで管理
      - PGDATA=/var/lib/postgresql/data/pgdata # データディレクトリ指定 (任意)
    volumes:
      - postgres_db_data:/var/lib/postgresql/data/pgdata # DBデータの永続化
      # - ./postgres_init_scripts:/docker-entrypoint-initdb.d # 初期化スクリプト用 (任意)
    ports: # 開発時やpgAdmin以外からの直接接続が必要な場合のみホストに公開。通常は不要
    # - "5432:5432"
    healthcheck: # 簡単なヘルスチェック例
      test: ["CMD-SHELL", "pg_isready -U your_db_user -d your_app_database"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shared_backend_network

  # --------------------------------------------------------------------------
  #  🐘 PostgreSQL 管理ツール (pgAdmin 4)
  # --------------------------------------------------------------------------
  pgadmin:
    image: dpage/pgadmin4:latest # TODO: バージョンは適宜選択
    container_name: pgadmin_manager
    hostname: pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com # TODO: 変更
      - PGADMIN_DEFAULT_PASSWORD=supersecretadminpassword # TODO: 強力なパスワードに変更し、.envファイルで管理
      # - PGADMIN_LISTEN_PORT=80 # コンテナ内ポート (デフォルトは80)
    volumes:
      - pgadmin_data:/var/lib/pgadmin # pgAdminの設定やサーバー接続情報の永続化
    ports: # Caddy経由でアクセスさせるため、ホストへの直接公開は必須ではない
    # - "5050:80"
    depends_on:
      - postgres_db
    networks:
      - shared_backend_network

  # --------------------------------------------------------------------------
  #  🛡️ バックアップ管理システム (Duplicati)
  # --------------------------------------------------------------------------
  duplicati:
    image: duplicati/duplicati:latest # TODO: バージョンは適宜選択
    container_name: duplicati_backup_manager
    hostname: duplicati
    restart: unless-stopped
    volumes:
      - duplicati_config_data:/config # Duplicatiの設定データ
      - duplicati_backups_storage:/backups # Duplicatiが暗号化バックアップを保存する先 (実際のストレージパスにマウント推奨)
      - db_dumps_staging_area:/source_db_dumps # DBダンプスクリプトの出力先であり、Duplicatiのバックアップ元
      - ./duplicati_scripts:/scripts # pg_dumpを実行するスクリプトなどを置く場所
    ports: # Caddy経由でアクセスさせるため、ホストへの直接公開は必須ではない
    # - "8200:8200"
    environment:
      - PUID=1000 # TODO: ホストOSの適切なユーザーID/グループIDに変更
      - PGID=1000
      - TZ=Asia/Tokyo # タイムゾーン設定 (任意)
    # Duplicatiのバックアップ前スクリプトでDBダンプを作成する場合、
    # DuplicatiコンテナがPostgreSQLクライアントツール(pg_dump)を持っていなければ、
    # スクリプト内で `docker exec -T postgres_db pg_dump ...` のように
    # DBコンテナのコマンドを実行するか、
    # あるいはDuplicatiコンテナにpg_dumpをインストールするDockerfileを作成する必要がある。
    # もしくは、pg_dumpコマンドを持つ軽量なコンテナを一時的に起動してダンプを作成し、
    # その出力先をDuplicatiが監視する形も考えられる。
    # ここでは、/scriptsに置かれたスクリプトが何らかの方法でpg_dumpを実行できる前提。
    networks:
      - shared_backend_network # DBコンテナにアクセスするため
    depends_on:
      - postgres_db # DBダンプ作成のため

  # --------------------------------------------------------------------------
  #  👀 コンテナ管理プラットフォーム (Portainer CE)
  # --------------------------------------------------------------------------
  portainer:
    image: portainer/portainer-ce:latest # TODO: バージョンは適宜選択
    container_name: portainer_container_manager
    hostname: portainer
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock # Dockerソケットを指定
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Dockerソケットをマウント
      - portainer_data:/data # Portainerの設定データの永続化
    ports: # Caddy経由でアクセスさせるため、ホストへの直接公開は必須ではない